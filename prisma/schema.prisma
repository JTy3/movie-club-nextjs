datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String                 @id @default(cuid())
  name                 String?
  email                String?                @unique
  emailVerified        DateTime?
  image                String?
  accounts             Account[]
  sessions             Session[]
  groups               UserInGroup[]
  MovieInUserWatchlist MovieInUserWatchlist[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Movie {
  id                    String                  @id @default(cuid())
  tmdbId                Int                     @unique
  title                 String?
  overview              String?
  posterPath            String?
  releaseDate           String?
  MovieOfTheWeekGroup   Group[]
  MovieInUserWatchlist  MovieInUserWatchlist[]
  MovieInGroupWatchlist MovieInGroupWatchlist[]
}

model Group {
  id                    String                  @id @default(cuid())
  name                  String
  createdAt             DateTime                @default(now())
  movieOfTheWeekId      String?
  movieOfTheWeek        Movie?                  @relation(fields: [movieOfTheWeekId], references: [id])
  users                 UserInGroup[]
  MovieInGroupWatchlist MovieInGroupWatchlist[]
}

model UserInGroup {
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  group    Group    @relation(fields: [groupId], references: [id])
  groupId  String
  role     String
  joinedAt DateTime @default(now())

  @@id([userId, groupId])
}

model MovieInUserWatchlist {
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  movie   Movie    @relation(fields: [movieId], references: [id])
  movieId String
  added   DateTime @default(now())

  @@id([userId, movieId])
}

model MovieInGroupWatchlist {
  group   Group    @relation(fields: [groupId], references: [id])
  groupId String
  movie   Movie    @relation(fields: [movieId], references: [id])
  movieId String
  added   DateTime @default(now())

  @@id([groupId, movieId])
}
